[gd_scene load_steps=44 format=2]

[ext_resource path="res://Mobs/Player/Player.cs" type="Script" id=1]
[ext_resource path="res://HUD.tscn" type="PackedScene" id=2]
[ext_resource path="res://Assets/Mesh/revolver.obj" type="ArrayMesh" id=3]
[ext_resource path="res://Assets/Textures/CrossHair.png" type="Texture" id=4]
[ext_resource path="res://Assets/SoundEffects/gunShot01.wav" type="AudioStream" id=5]
[ext_resource path="res://Assets/SoundEffects/gunShot02.wav" type="AudioStream" id=6]
[ext_resource path="res://Assets/SoundEffects/gunShot03.wav" type="AudioStream" id=7]
[ext_resource path="res://Assets/SoundEffects/Step02.wav" type="AudioStream" id=8]
[ext_resource path="res://Assets/SoundEffects/Step04.wav" type="AudioStream" id=9]
[ext_resource path="res://Assets/SoundEffects/Step03.wav" type="AudioStream" id=10]
[ext_resource path="res://Assets/SoundEffects/Step05.wav" type="AudioStream" id=11]
[ext_resource path="res://Assets/SoundEffects/Step01.wav" type="AudioStream" id=12]
[ext_resource path="res://Assets/SoundEffects/Land.wav" type="AudioStream" id=13]
[ext_resource path="res://Assets/SoundEffects/Jump.wav" type="AudioStream" id=14]
[ext_resource path="res://Assets/Textures/imageonline-co-pixelated(2).png" type="Texture" id=15]
[ext_resource path="res://Assets/SoundEffects/8b.mp3" type="AudioStream" id=16]
[ext_resource path="res://Scripts/Resume.cs" type="Script" id=17]
[ext_resource path="res://Assets/Fonts/firacode.ttf" type="DynamicFontData" id=18]
[ext_resource path="res://Assets/Styles/redButton.tres" type="StyleBox" id=19]
[ext_resource path="res://Assets/Styles/blueButton.tres" type="StyleBox" id=20]
[ext_resource path="res://Assets/SoundEffects/alternativeGunShot.wav" type="AudioStream" id=21]
[ext_resource path="res://PlayerInfos.tscn" type="PackedScene" id=22]
[ext_resource path="res://Assets/SoundEffects/cantShoot.wav" type="AudioStream" id=23]
[ext_resource path="res://Assets/SoundEffects/hit.wav" type="AudioStream" id=24]

[sub_resource type="CapsuleShape" id=1]
radius = 0.5
height = 1.5

[sub_resource type="SpatialMaterial" id=4]

[sub_resource type="CapsuleMesh" id=2]
material = SubResource( 4 )
radius = 0.5
mid_height = 1.5

[sub_resource type="SpatialMaterial" id=6]
albedo_texture = ExtResource( 15 )

[sub_resource type="Shader" id=7]
code = "shader_type spatial;
render_mode unshaded;

const int pixel_size = 4; //resolution must be divisible by pixel_size

void fragment() {
	float x = float(int(FRAGCOORD.x) % pixel_size);
	float y = float(int(FRAGCOORD.y) % pixel_size);

	x = FRAGCOORD.x + floor(float(pixel_size) / 2.0) - x;
	y = FRAGCOORD.y + floor(float(pixel_size) / 2.0) - y;

	ALBEDO = texture(SCREEN_TEXTURE, vec2(x, y) / VIEWPORT_SIZE).xyz;
}"

[sub_resource type="ShaderMaterial" id=8]
render_priority = -1
shader = SubResource( 7 )

[sub_resource type="QuadMesh" id=9]
material = SubResource( 8 )
size = Vector2( 5, 5 )

[sub_resource type="SpatialMaterial" id=29]
albedo_color = Color( 0.423529, 0.352941, 0.352941, 1 )
metallic = 0.29
metallic_specular = 0.6

[sub_resource type="Shader" id=18]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 18 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.4
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = true
shader_param/roll_speed = 1.07
shader_param/roll_size = 15.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.0
shader_param/noise_opacity = 0.1
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = 0.003
shader_param/brightness = 1.6
shader_param/discolor = false
shader_param/warp_amount = 0.07
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.3
shader_param/vignette_opacity = 0.5

[sub_resource type="StyleBoxFlat" id=22]
bg_color = Color( 0, 0, 0, 0.627451 )
corner_radius_top_left = 25
corner_radius_top_right = 25
corner_radius_bottom_right = 25
corner_radius_bottom_left = 25

[sub_resource type="DynamicFont" id=20]
size = 28
font_data = ExtResource( 18 )

[sub_resource type="StyleBoxFlat" id=23]
bg_color = Color( 0.482353, 0.482353, 0.482353, 0.345098 )
corner_radius_top_left = 2
corner_radius_top_right = 2
corner_radius_bottom_right = 2
corner_radius_bottom_left = 2
expand_margin_left = 50.0
expand_margin_right = 50.0
expand_margin_top = 1.0

[sub_resource type="InputEventAction" id=27]
action = "fullscreen"

[sub_resource type="ShortCut" id=28]
shortcut = SubResource( 27 )

[sub_resource type="DynamicFont" id=24]
font_data = ExtResource( 18 )

[sub_resource type="StyleBoxFlat" id=25]
bg_color = Color( 0.0509804, 0.458824, 0.490196, 0.470588 )
corner_radius_top_left = 10
corner_radius_top_right = 10

[sub_resource type="DynamicFont" id=21]
size = 18
font_data = ExtResource( 18 )

[sub_resource type="StyleBoxFlat" id=26]
bg_color = Color( 0.54902, 0.054902, 0.054902, 0.545098 )
corner_radius_bottom_right = 10
corner_radius_bottom_left = 10

[node name="Player" type="KinematicBody"]
script = ExtResource( 1 )
_version = "1.0.5"

[node name="BackGroundMusic" type="AudioStreamPlayer2D" parent="."]
pause_mode = 2
stream = ExtResource( 16 )

[node name="GunShotSoundsEffects" type="Spatial" parent="."]

[node name="GunShot01" type="AudioStreamPlayer3D" parent="GunShotSoundsEffects"]
stream = ExtResource( 5 )

[node name="GunShot02" type="AudioStreamPlayer3D" parent="GunShotSoundsEffects"]
stream = ExtResource( 6 )
pitch_scale = 2.27

[node name="GunShot03" type="AudioStreamPlayer3D" parent="GunShotSoundsEffects"]
stream = ExtResource( 7 )

[node name="JeansMod" type="AudioStreamPlayer3D" parent="GunShotSoundsEffects"]
stream = ExtResource( 21 )

[node name="CantShoot" type="AudioStreamPlayer3D" parent="GunShotSoundsEffects"]
stream = ExtResource( 23 )

[node name="Hit" type="AudioStreamPlayer3D" parent="GunShotSoundsEffects"]
stream = ExtResource( 24 )

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
shape = SubResource( 1 )

[node name="CSGMesh" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
mesh = SubResource( 2 )
material = SubResource( 6 )

[node name="Head" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.952763, 0 )

[node name="Camera" type="Camera" parent="Head"]
current = true
fov = 110.0

[node name="PixeliseShader" type="MeshInstance" parent="Head/Camera"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.466729 )
mesh = SubResource( 9 )

[node name="TextureRect" type="TextureRect" parent="Head/Camera"]
margin_left = 630.0
margin_top = 350.0
margin_right = 670.0
margin_bottom = 390.0
rect_scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 4 )

[node name="RayCast" type="RayCast" parent="Head/Camera"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 5.96046e-08, -5.96046e-08, 0 )
enabled = true
cast_to = Vector3( 0, 0, -2000 )

[node name="Revolver" type="CSGMesh" parent="Head"]
transform = Transform( -0.749011, -0.0151239, -0.0354177, -0.0324604, -0.123235, 0.739094, -0.0207236, 0.739652, 0.122417, 0.833908, -0.505598, -0.479439 )
mesh = ExtResource( 3 )
material = SubResource( 29 )

[node name="HUD" type="CanvasLayer" parent="."]

[node name="Debug" parent="HUD" instance=ExtResource( 2 )]
margin_right = -1280.0
margin_bottom = -720.0

[node name="PlayerInfos" parent="HUD" instance=ExtResource( 22 )]

[node name="StepSoundsEffetcs" type="Spatial" parent="."]

[node name="Step01" type="AudioStreamPlayer3D" parent="StepSoundsEffetcs"]
stream = ExtResource( 12 )

[node name="Step02" type="AudioStreamPlayer3D" parent="StepSoundsEffetcs"]
stream = ExtResource( 8 )

[node name="Step03" type="AudioStreamPlayer3D" parent="StepSoundsEffetcs"]
stream = ExtResource( 10 )

[node name="Step04" type="AudioStreamPlayer3D" parent="StepSoundsEffetcs"]
stream = ExtResource( 9 )

[node name="Step05" type="AudioStreamPlayer3D" parent="StepSoundsEffetcs"]
stream = ExtResource( 11 )

[node name="TimerBetweenStep" type="Timer" parent="StepSoundsEffetcs"]
wait_time = 0.2
one_shot = true

[node name="jumpAndLandSoundEffect" type="Spatial" parent="."]

[node name="jump" type="AudioStreamPlayer3D" parent="jumpAndLandSoundEffect"]
stream = ExtResource( 14 )

[node name="Land" type="AudioStreamPlayer3D" parent="jumpAndLandSoundEffect"]
stream = ExtResource( 13 )

[node name="checkFloor" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.304532, 0 )
enabled = true

[node name="CanvasLayer2" type="CanvasLayer" parent="."]
pause_mode = 2

[node name="MenuPause" type="Control" parent="CanvasLayer2"]
pause_mode = 2
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 40.0
margin_bottom = 40.0

[node name="PauseShader" type="ColorRect" parent="CanvasLayer2/MenuPause"]
pause_mode = 2
material = SubResource( 19 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = -40.0
margin_bottom = -40.0

[node name="Panneau" type="Panel" parent="CanvasLayer2/MenuPause"]
anchor_left = 0.376
anchor_right = 0.5
margin_left = -11.32
margin_top = 129.0
margin_right = 121.0
margin_bottom = 604.0
custom_styles/panel = SubResource( 22 )

[node name="Elements" type="VBoxContainer" parent="CanvasLayer2/MenuPause/Panneau"]
margin_left = 34.0
margin_top = 27.0
margin_right = 269.0
margin_bottom = 343.0

[node name="TitreMenu" type="Label" parent="CanvasLayer2/MenuPause/Panneau/Elements"]
margin_right = 235.0
margin_bottom = 35.0
custom_fonts/font = SubResource( 20 )
text = "Pause"
align = 1

[node name="PixelEffectToggle" type="CheckButton" parent="CanvasLayer2/MenuPause/Panneau/Elements"]
margin_top = 39.0
margin_right = 235.0
margin_bottom = 79.0
pressed = true
text = "Pixel Effect"

[node name="Separator" type="VSeparator" parent="CanvasLayer2/MenuPause/Panneau/Elements"]
margin_top = 83.0
margin_right = 235.0
margin_bottom = 86.0
custom_styles/separator = SubResource( 23 )

[node name="Music" type="VBoxContainer" parent="CanvasLayer2/MenuPause/Panneau/Elements"]
margin_top = 90.0
margin_right = 235.0
margin_bottom = 168.0

[node name="MusicLabel" type="Label" parent="CanvasLayer2/MenuPause/Panneau/Elements/Music"]
margin_right = 235.0
margin_bottom = 14.0
text = "Music :"

[node name="HSlider" type="HSlider" parent="CanvasLayer2/MenuPause/Panneau/Elements/Music"]
margin_top = 18.0
margin_right = 235.0
margin_bottom = 34.0
value = 100.0

[node name="MusicToggle" type="CheckButton" parent="CanvasLayer2/MenuPause/Panneau/Elements/Music"]
margin_top = 38.0
margin_right = 235.0
margin_bottom = 78.0

[node name="Separator2" type="VSeparator" parent="CanvasLayer2/MenuPause/Panneau/Elements"]
margin_top = 172.0
margin_right = 235.0
margin_bottom = 175.0
custom_styles/separator = SubResource( 23 )

[node name="SoundEffects" type="VBoxContainer" parent="CanvasLayer2/MenuPause/Panneau/Elements"]
margin_top = 179.0
margin_right = 235.0
margin_bottom = 257.0

[node name="SELabel" type="Label" parent="CanvasLayer2/MenuPause/Panneau/Elements/SoundEffects"]
margin_right = 235.0
margin_bottom = 14.0
text = "Sound Effets :"

[node name="Slider" type="HSlider" parent="CanvasLayer2/MenuPause/Panneau/Elements/SoundEffects"]
margin_top = 18.0
margin_right = 235.0
margin_bottom = 34.0
value = 100.0

[node name="SEToggle" type="CheckButton" parent="CanvasLayer2/MenuPause/Panneau/Elements/SoundEffects"]
margin_top = 38.0
margin_right = 235.0
margin_bottom = 78.0
pressed = true

[node name="Separator3" type="VSeparator" parent="CanvasLayer2/MenuPause/Panneau/Elements"]
margin_top = 261.0
margin_right = 235.0
margin_bottom = 264.0
custom_styles/separator = SubResource( 23 )

[node name="JModToggle" type="CheckButton" parent="CanvasLayer2/MenuPause/Panneau/Elements"]
margin_top = 268.0
margin_right = 235.0
margin_bottom = 308.0
text = "Jean's Mod"

[node name="FullScToggle" type="CheckButton" parent="CanvasLayer2/MenuPause/Panneau/Elements"]
margin_top = 312.0
margin_right = 235.0
margin_bottom = 352.0
pressed = true
shortcut = SubResource( 28 )
text = "Fullscreen"

[node name="Boutons" type="VBoxContainer" parent="CanvasLayer2/MenuPause/Panneau/Elements"]
margin_top = 356.0
margin_right = 235.0
margin_bottom = 403.0

[node name="Resume" type="Button" parent="CanvasLayer2/MenuPause/Panneau/Elements/Boutons"]
pause_mode = 2
margin_right = 235.0
margin_bottom = 20.0
custom_fonts/font = SubResource( 24 )
custom_styles/hover = SubResource( 25 )
custom_styles/normal = ExtResource( 20 )
action_mode = 0
text = "Resume"
script = ExtResource( 17 )

[node name="Exit" type="Button" parent="CanvasLayer2/MenuPause/Panneau/Elements/Boutons"]
pause_mode = 2
margin_top = 24.0
margin_right = 235.0
margin_bottom = 47.0
custom_fonts/font = SubResource( 21 )
custom_styles/hover = SubResource( 26 )
custom_styles/normal = ExtResource( 19 )
action_mode = 0
text = "Menu"

[node name="Separator4" type="VSeparator" parent="CanvasLayer2/MenuPause/Panneau/Elements"]
margin_top = 407.0
margin_right = 235.0
margin_bottom = 410.0
custom_styles/separator = SubResource( 23 )

[connection signal="pressed" from="CanvasLayer2/MenuPause/Panneau/Elements/PixelEffectToggle" to="." method="SwitchPixelShader"]
[connection signal="value_changed" from="CanvasLayer2/MenuPause/Panneau/Elements/Music/HSlider" to="." method="ChangeMusicVolume"]
[connection signal="toggled" from="CanvasLayer2/MenuPause/Panneau/Elements/Music/MusicToggle" to="." method="SwitchMusicPlayer"]
[connection signal="value_changed" from="CanvasLayer2/MenuPause/Panneau/Elements/SoundEffects/Slider" to="." method="ChangeSoundEffectsVolume"]
[connection signal="toggled" from="CanvasLayer2/MenuPause/Panneau/Elements/SoundEffects/SEToggle" to="." method="SwitchSEPlayer"]
[connection signal="toggled" from="CanvasLayer2/MenuPause/Panneau/Elements/JModToggle" to="." method="SwitchJeansMod"]
[connection signal="toggled" from="CanvasLayer2/MenuPause/Panneau/Elements/FullScToggle" to="." method="ToggleFullscreen"]
[connection signal="pressed" from="CanvasLayer2/MenuPause/Panneau/Elements/Boutons/Resume" to="." method="UnPause"]
[connection signal="pressed" from="CanvasLayer2/MenuPause/Panneau/Elements/Boutons/Exit" to="." method="QuitGame"]
